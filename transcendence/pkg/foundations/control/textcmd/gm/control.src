//--> control <--
//
// CONTROL:TEXTCMD/GM/CONTROL.SRC
//
// Accesses the list of registered packages and brings
// up a gump to access them from :)
//
// Creator: TJ Houston (Myrathi)
// Contact: myrathi@templar.dhs.org
//
// Created: 05-Apr-2000
// Updated: 01-May-2000
//
use uo;
use os;
use basic;

include ":gumps:gumps";
//include ":gumps:gumps"; // not supported until a future compiler release. BLAH! :P

// Gump constants
//
// (also see top of BuildGump() function)
//
const WINX_MAX := 640;
const WINY_MAX := 480;

// Control.src constants
//
const CTRL_VER := "0.5a";
const CTRL_INST := "#CTRL_Installed";

enum CTRL
	CTRL_NAME := 1,	//1
	CTRL_VERSION,	//2
	CTRL_HASIFACE,	//3
	CTRL_SCRIPT		//4
endenum

// Global list of gump-button IDs
//
var pkg_ids;
var pkg_scripts;

program textcmd_control( who, params )

	if ( params["-r"] || params["refresh"] )
		SendSysMessage( who, "Refreshing registered package list..." );
		if ( run_script_to_completion( ":control:check_packages" ) )
			SendSysMessage( who, "Refresh complete!" );
		else
			SendSysMessage( who, "Refresh failed!" );
			return;
		endif
	endif

	var zlist := GetGlobalProperty( CTRL_INST );
	if ( !zlist )
		SendSysMessage( who, "Controller Package has not initialised yet." );
		return;
	endif

	if ( zlist == -1 )
		SendSysMessage( who, "There are no registered packages." );
		return;
	endif

	var exit_id := BuildGump( zlist );
	if ( !exit_id )
		SendSysMessage( who, "Failed to build the ICP gump." );
		return;
	endif

	var retv := GFSendGump( who );
	if ( !retv && (retv != 0) )
		SendSysMessage( who, "Please close any other open gumps and try again." );
		return;
	endif

	if ( retv[0] in pkg_ids )
		var idx := 1;
		while( (pkg_ids[idx] != retv[0]) && (idx <= pkg_ids.size()) )
			idx := idx + 1;
		endwhile
		if ( retv[0] != pkg_ids[idx] )
			SendSysMessage( who, "Corrupted PackageID array!" );
			print( "[CONTROL] Corrupted PackageID array! Argh!" );
			return;
		endif
		run_script_to_completion( pkg_scripts[idx], { "ICP", who } );
	else
		SendSysMessage( who, "Retv[0]/cancel = " + Hex(retv[0]) + "/" + Hex(exit_id) );
	endif

	return;

endprogram

////////////////////////////////////////////////////////////
const HEAD_COL := 56; // 98
//
const PANEX_LEFT := 20;
const PANEX_RIGHT := WINX_MAX - PANEX_LEFT;
const PANEW_ALL := PANEX_RIGHT - PANEX_LEFT;
//
const PANEY_TOP := 0; //30
const PANEH_TOP := 41;
//
const PANEY_MID := PANEY_TOP + 50;
const PANEH_MID := WINY_MAX - PANEY_MID - 30;
//
const PANEX_LIST := 30;
const PANEY_LIST := 10;
const PANEW_LIST := (PANEW_ALL - (2 * PANEX_LIST));
const PANEH_LIST := PANEH_MID - 30;
//
const PANEW_VER := 110;
////////////////////////////////////////////////////////////

// Builds the basic gump structure, excluding package info
//
// Returns: The 'keyid' for the gump-exit button
//
function BuildGump( zlist )

	var exit_but;

		pkg_ids := { };
		pkg_scripts := { };

		GFInitGump();
		GFNoClose();
		GFNoMove();

		// Page 0

			GFResizePic(0, 0, BKGND_GOLDTRIM, WINX_MAX+3, WINY_MAX+4);
			GFTextMid(1, 12, WINX_MAX, 55, "Interface Controller Package" );
			GFTextLine(6, WINY_MAX - 21, 32, "v" + CTRL_VER );
exit_but :=	GFButtonID(WINX_MAX - 65, 11, 0x849, 0x848, 1); // Cancel  (0x81C, 0x81B = OKAY)

			GFSetRef(PANEX_LEFT, PANEY_MID);
			//GFResizePic(0, 0, BKGND_STONESLAB, PANEW_ALL, PANEH_MID);

			GFSetRefRel(PANEX_LIST, PANEY_LIST);
			AddScrollAndHeader();

		// Page 1 - ?
			var pkg_per_page := 16;
			var nmaxpage := CInt( zlist.size() / pkg_per_page ) + 1;
			if ( Mod(zlist.size(), pkg_per_page) == 0 )
				nmaxpage := nmaxpage - 1;
			endif

			for npage := 1 to nmaxpage
				GFPage( npage );
				AddPackageEntries( zlist, ((npage-1)*pkg_per_page)+1, npage * pkg_per_page );

				AddPageButtons( npage, nmaxpage );
			endfor

	return (exit_but.keyid);

endfunction

//------------------------------------------------------------

function AddScrollAndHeader()

	GFResizePic(0, 0, BKGND_SCROLL, PANEW_LIST, PANEH_LIST);
	GFGumpPic(35, 10, 0xfd); // down arrow within gold raise
	GFTextLine(56, 10, HEAD_COL, "Package Name" );
	GFTextMid(PANEW_LIST - PANEW_VER - 32, 10, PANEW_VER, HEAD_COL, "Version" );

	return;

endfunction

// Gem buttons for gump
const GEM_U := 0x4ba; // release
const GEM_D := 0x4b9; // press
const PKG_COL := 47;

function AddPackageEntries( zpkgs, lbound, ubound )

	// If no array passed, or if it's empty, return immediately
	//
	if ( !zpkgs )
		syslog( "Bad PKGLIST" );
		return;
	elseif( zpkgs.size() == 0 )
		syslog( "Empty PKGLIST" );
		return;
	endif

	// Validate the lower array-bounds
	if ( lbound > zpkgs.size() )
		return;
	endif

	// Validate the upper array-bounds
	if ( ubound < lbound )
		ubound := lbound;
	elseif ( ubound > zpkgs.size() )
		ubound := zpkgs.size();
	endif

	// Change the relative origin and store the old absolute [x,y]
	var oldref := GFSetRefRel( 35, 37 );

	// Initialise offset and delta-y
	var offy := 0, dy := 18;

	// Display each package
	//
	for i := lbound to ubound
		var zitem := zpkgs[i];

		var sname := zitem[CTRL_NAME];
		var sver := zitem[CTRL_VERSION];
		var bctrl := zitem[CTRL_HASIFACE];
		var sscript := zitem[CTRL_SCRIPT];

		GFTextCrop( 21, offy, PANEW_LIST-172, dy, PKG_COL, sname );
		GFTextMid( PANEW_LIST-PANEW_VER-(35+32), offy, PANEW_VER, PKG_COL, sver );

		if ( bctrl )
			var button := GFButtonID( 0, offy+3, GEM_U, GEM_D, 1 );
			pkg_ids.append( button.keyid );
			pkg_scripts.append( sscript );
		endif

		offy := offy + dy;
		sleepms(2);
	endfor

	// Reset the origin
	GFSetRef( oldref.x, oldref.y );

	return;

endfunction

//------------------------------------------------------------

// Gump prev/next button IDs
const GEM_PREV := 0x8af;
const GEM_NEXT := 0x8b0;

const GEM_LEFT := 33;
const GEM_RIGHT := (-43);
const GEM_UP := 27;

function AddPageButtons( npage, nmaxpage )

	if ( npage > 1 )
		GFButtonPage( GEM_LEFT, PANEH_LIST - GEM_UP, GEM_PREV, GEM_PREV, npage-1 );
		GFTextLine( GEM_LEFT + 24, PANEH_LIST - GEM_UP - 4, HEAD_COL, "Prev" );
	endif

	if ( npage < nmaxpage )
		GFButtonPage( PANEW_LIST + GEM_RIGHT, PANEH_LIST - GEM_UP, GEM_NEXT, GEM_NEXT, npage+1 );
		GFTextRight( PANEW_LIST + GEM_RIGHT - 12, PANEH_LIST - GEM_UP - 4, HEAD_COL, "Next" );
	endif

endfunction

//------------------------------------------------------------

// A raped version of Sigismund's "Mod()" function. Credits to him! :)
// Put it here so I didn't have to rely on "math.inc"
function Mod(num, denom)
	var dvd := num-(CInt(num/denom)*denom);
	return dvd;
endfunction