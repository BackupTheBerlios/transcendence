use uo;
use os;
use util;
use cfgfile;
use polsys;

include "include/spellRestrictions";
include "include/attributes";
include "include/particles";
include "include/effects2D";
include "checkeffects";

var spellscfg := ReadConfigFile(":spells:spells"); 

program cast_AGILITY( parms )
  
  var circle := 2;
  var delivery := "direct";
  var noto := "helpful";
  var id := 9;
  
  
  
  
  var result := maincast(parms, delivery, circle, noto, id);
  if(result == 0)
    return;
  endif
  caster := result[1];
  var cast_on := result[2];
  PlaySoundEffect(caster, 0x1e8);
  //if(GetObjProperty (caster, "SessionClientType") == "3D")
  CheckForSpell3DEffects(spellscfg, caster, cast_on, id);
  //else
  Play2DObjectCenteredEffectHuefx( cast_on, 0x373a, 7, 7);
  //PlayObjectCenteredEffect(caster, 0x373a, 7,7);
  
  //endif
  if(!CanMod(cast_on, "dex"))
    SendSysMessage(caster,"Another existing effect negates your spell!");
    return;
  endif
  var magery := GetEffectiveSkill(caster, SKILLID_MAGERY);
  var mod_amount := GetModAmount( magery );
  var duration := GetModDuration( magery );
  DoTempMod(cast_on, "dex", mod_amount, duration);
endprogram