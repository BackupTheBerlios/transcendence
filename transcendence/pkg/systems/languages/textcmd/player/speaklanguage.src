//
// speakmylanguage-script
//
// 
//
// Creator: Artix
// Contact: 
//
// Created: 11-Dec-2001
// Updated: 
//

use uo;
use os;
use util;
use cfgfile;

var errors := {"sqrqx", "blblbh", "hxqh", "qyhsk"};

program speakmylanguage (who, lingua)
if (!lingua)
 var layout := {
"page 0",
"nodispose",
"gumppic 25 0 6794",


"text 240 55 995 0",
//top bar
"text 190 80 995 1",
"button 370 78 6786 6787 1 0 17",//Britannian
"text 190 110 995 2",
"button 370 108 6786 6787 1 0 18",//Tribal
"text 190 140 995 3",
"button 370 138 6786 6787 1 0 19",//Northern
"text 190 170 995 4",
"button 370 168 6786 6787 1 0 20",//Desertic
"text 190 200 995 5",
"button 370 198 6786 6787 1 0 21",//Elfic
"text 190 230 995 6",
"button 370 228 6786 6787 1 0 22",//Tritionian

"page 1"
};
var data := array ("Language Selection",
                     "Britannian",
                     "Tribal",
                     "Northern",
                     "Desertic",
                     "Elfic",
                     "Tritonian"
                     );
var select := SendDialogGump(who, layout, data);
case (select[0])
   17:
      lingua := "britannian";
   18:
      lingua := "tribal"; 
   19:
      lingua := "northern";
   20:
      lingua := "desertic";
   21:
      lingua := "elf";
   22:
      lingua := "triton";
         
endcase                   
endif
var translation;
var race := GetObjProperty(who, "race");
var spokenlanguages;
var sillabario := ReadConfigFile("dictionary");
if (!sillabario)
 SendSysMessage(who, "ERROR");
endif
var languageability;
var firstsyllable;
var secondsyllable;
//local word;
sillabario := FindConfigElem(sillabario, lingua);
if (!sillabario)
 SendSysMessage(who, "Sorry, that language doesn't exist", 3, 38);
 return;
endif
var syllables := GetConfigString(sillabario, "wordlist");
//print ("file cfg :" + syllables);
syllables := SplitWords(syllables);
//print ("sillabe :" + syllables);
var phrase;
var newphrase;
var probability;
var displayedword;
var displayedphrase := "";
var newword;
var i;
var q;
var rnd;
var myphrase := "";
SendSysMessage(who, "You start speaking " + lingua + " language ...", 3, 0x005a);

set_critical(1);
while (1)
 if (!who)
  break;
 endif


 phrase :=  RequestInput( who, who.backpack, "" );

 //printTextAbovePrivate( who, phrase, who, 3, 76 );
 phrase := SplitWords(phrase);
 myphrase := "";
 if (phrase[1] == "_exit")
  SendSysMessage(who, "You stop speaking your language.", 3, 38);
  break;
 endif
 if (phrase[1][1] == ".")
  SendSysMessage(who, "Command", 3, 38);
  return;
 endif
 translation := "";
 newphrase := {};
 displayedphrase := "";
 var myability := GetObjProperty(who, "spokenlanguages");
 myability := myability[lingua];
 if (myability < RandomInt(100))
  phrase.sort();
 endif

   foreach word in phrase
    if (myability < RandomInt(40))
     rnd := RandomInt(len(errors));
      if (rnd == 0)
       rnd := 1;
      elseif (rnd > len(syllables))
       rnd := len(errors);
      endif 
     newword := errors[rnd];
     word := errors[rnd];
     newphrase.append (newword);
    else

    rnd := RandomInt(len(syllables));
    if (rnd == 0)
     rnd := 1;
    elseif (rnd > len(syllables))
     rnd := len(syllables);
    endif 
    firstsyllable := syllables[rnd];
    //print ("first " + firstsyllable);
    rnd := RandomInt(len(syllables));
    if (rnd == 0)
     rnd := 1;
    elseif (rnd > len(syllables))
     rnd := len(syllables);
    endif
    secondsyllable := syllables[rnd];
    word := word;
    //print ("second " + secondsyllable);
    newword := firstsyllable + secondsyllable;
    newphrase.append (newword);
    //print (newphrase);
   endif
   endforeach
  
   foreach char in ListMobilesNearLocation( who.x, who.y, who.z, 14, who.realm )
     if (char.isA(POLCLASS_NPC))
      continue;
     endif
    
     displayedphrase := "";
     spokenlanguages := GetObjProperty(char, "spokenlanguages");
     print("lingua:_" + lingua);
     languageability := spokenlanguages[lingua];
     print("name: " + char.name + " lang ability: " + CStr(languageability));
      if (len(phrase) > 0)
      for (i := 1; i <= len(phrase); i := i + 1)
        probability := RandomInt(99);
        if (languageability < probability)
          displayedword := newphrase[i];
        else
          displayedword := phrase[i];
        endif
       displayedphrase := displayedphrase + displayedword + " ";
      endfor
     endif
     if (char.serial != who.serial)
      PrintTextAbovePrivate( who, displayedphrase, char, 3, 38 );
     endif
    endforeach
if (len(phrase) > 0)
      for (i := 1; i <= len(phrase); i := i + 1)
        //probability := randomint (99);
        /*if (languageability < probability)
          displayedword := newphrase[i];
        else
          displayedword := phrase[i];
        endif*/
       myphrase := myphrase + phrase[i] + " ";
      endfor
     endif
PrintTextAbovePrivate( who, myphrase, who, 3, 38 );
endwhile
   
endprogram


